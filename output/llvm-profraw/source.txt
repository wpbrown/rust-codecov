    1|      1|#![allow(dead_code)]#![allow(dead_code)]
    2|       |
    3|       |use async_trait::async_trait;
    4|       |
    5|      1|fn main() {
    6|      1|    println!("codecovsample::main");
    7|      1|}
    8|       |
    9|      1|async fn async_func() {
   10|       |    println!("async_func");
   11|       |}
   12|       |
   13|      1|async fn async_func_anon() {
   14|      1|    let x = async {
   15|      1|        println!("async_func");
   16|      1|    };
   17|      1|    x.await;
   18|      1|}
   19|       |
   20|       |#[async_trait]
   21|       |trait AsyncTrait {
   22|       |    async fn covered(&self);
   23|       |    async fn uncovered(&self);
   24|       |}
   25|       |
   26|       |struct AsyncTraitImpl;
   27|       |
   28|       |#[async_trait]
   29|       |impl AsyncTrait for AsyncTraitImpl {
   30|      1|    async fn covered(&self) {
   31|      1|        println!("covered");
   32|      1|        async_func_from_trait_covered().await;
   33|      1|    }
   34|       |
   35|      0|    async fn uncovered(&self) {
   36|      0|        println!("uncovered");
   37|      0|    }
   38|       |}
   39|       |
   40|      1|async fn async_func_from_trait_covered() {
   41|       |    println!("covered async func from trait");
   42|       |}
   43|       |
   44|       |#[cfg(test)]
   45|       |mod tests {
   46|       |    use futures_lite::future::block_on;
   47|       |
   48|       |    use super::*;
   49|       |
   50|       |    #[test]
   51|      1|    fn test_main() {
  ------------------
  | codecovsample::tests::test_main::{closure#0}:
  |   51|      1|    fn test_main() {
  ------------------
   52|      1|        main();
   53|      1|    }
  ------------------
  | codecovsample::tests::test_main:
  |   51|      1|    fn test_main() {
  |   52|      1|        main();
  |   53|      1|    }
  ------------------
   54|       |
   55|       |    #[test]
   56|      1|    fn cover_async_funcs() {
  ------------------
  | codecovsample::tests::cover_async_funcs::{closure#0}:
  |   56|      1|    fn cover_async_funcs() {
  ------------------
   57|      1|        block_on(async {
   58|      1|            async_func().await;
   59|      1|            async_func_anon().await;
   60|      1|        });
   61|      1|    }
  ------------------
  | codecovsample::tests::cover_async_funcs:
  |   56|      1|    fn cover_async_funcs() {
  |   57|      1|        block_on(async {
  |   58|       |            async_func().await;
  |   59|       |            async_func_anon().await;
  |   60|      1|        });
  |   61|      1|    }
  ------------------
   62|       |
   63|       |    #[test]
   64|      1|    fn cover_async_trait() {
  ------------------
  | codecovsample::tests::cover_async_trait::{closure#0}:
  |   64|      1|    fn cover_async_trait() {
  ------------------
   65|      1|        block_on(async {
   66|      1|            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);
   67|      1|            x.covered().await;
   68|      1|        });
   69|      1|    }
  ------------------
  | codecovsample::tests::cover_async_trait:
  |   64|      1|    fn cover_async_trait() {
  |   65|      1|        block_on(async {
  |   66|       |            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);
  |   67|       |            x.covered().await;
  |   68|      1|        });
  |   69|      1|    }
  ------------------
   70|       |}

