    1|      1|#![allow(dead_code)][0;46m[0m#![allow(dead_code)]
    2|       |
    3|       |use async_trait::async_trait;
    4|       |
    5|      1|fn main() {
    6|      1|    println!("codecovsample::main");
    7|      1|}
    8|       |
    9|       |enum Covered {
   10|       |    Variant1,
   11|       |    Variant2,
   12|       |}
   13|       |enum Uncovered {
   14|       |    Variant1,
   15|       |    Variant2,
   16|       |}
   17|       |enum PartiallyCovered {
   18|       |    Variant1,
   19|       |    Variant2,
   20|       |}
   21|       |
   22|      2|fn fn_covered_enum(input: Covered) {
   23|      2|    match input {
   24|      2|        Covered::Variant1 => { println!("Variant1"); }
                                           ^1
   25|      1|        Covered::Variant2 => { println!("Variant2"); }
   26|       |    }
   27|      2|}
   28|       |
   29|      0|[0;41mfn fn_uncovered_enum(input: Uncovered) {[0m
   30|      0|[0;41m    match input {[0m
   31|      0|[0;41m        Uncovered::Variant1[0m => [0;41m{ println!("Variant1"); }[0m
   32|      0|        Uncovered::Variant2 => [0;41m{ println!("Variant2"); }[0m
   33|       |    }
   34|      0|[0;41m}[0m
   35|       |
   36|      1|fn fn_partially_covered_enum(input: PartiallyCovered) {
   37|      1|    match input {
   38|      1|        PartiallyCovered::Variant1 => { println!("Variant1"); }
   39|      0|        PartiallyCovered::Variant2 => [0;41m{ println!("Variant2"); }[0m
   40|       |    }
   41|      1|}
   42|       |
   43|       |trait ATrait {
   44|       |    fn covered(&self);
   45|       |    fn uncovered(&self);
   46|       |    fn func_covered();    
   47|       |    fn func_uncovered();
   48|       |
   49|      2|    fn default_covered(&self) {
   50|      2|        println!("default_covered");
   51|      2|    }
  ------------------
  | [0;36m<codecovsample::ATraitImplDirect as codecovsample::ATrait>::default_covered:
[0m  |   49|      1|    fn default_covered(&self) {
  |   50|      1|        println!("default_covered");
  |   51|      1|    }
  ------------------
  | [0;36m<codecovsample::ATraitImplGeneric as codecovsample::ATrait>::default_covered:
[0m  |   49|      1|    fn default_covered(&self) {
  |   50|      1|        println!("default_covered");
  |   51|      1|    }
  ------------------
   52|       |    
   53|      0|    [0;41mfn default_uncovered(&self) {[0m
   54|      0|[0;41m        println!("default_uncovered");[0m
   55|      0|[0;41m    }[0m
   56|       |}
   57|       |trait BTrait {
   58|       |    fn covered(&self);
   59|       |    fn uncovered(&self);
   60|       |
   61|      1|    fn default_covered(&self) {
   62|      1|        println!("default_covered");
   63|      1|    }
   64|       |    
   65|       |    fn default_uncovered(&self) {
   66|       |        println!("default_uncovered");
   67|       |    }
   68|       |}
   69|       |
   70|       |struct ATraitImplDirect;
   71|       |
   72|       |impl ATrait for ATraitImplDirect {
   73|      1|    fn covered(&self) {
   74|      1|        println!("covered")
   75|      1|    }
   76|       |
   77|      0|    [0;41mfn uncovered(&self) {[0m
   78|      0|[0;41m        println!("uncovered");[0m
   79|      0|[0;41m    }[0m
   80|       |
   81|      1|    fn func_covered() {
   82|      1|        println!("func_covered");
   83|      1|    }
   84|       |
   85|      0|    [0;41mfn func_uncovered() {[0m
   86|      0|[0;41m        println!("func_covered");[0m
   87|      0|[0;41m    }[0m
   88|       |}
   89|       |
   90|       |struct ATraitImplGeneric;
   91|       |
   92|       |impl ATrait for ATraitImplGeneric {
   93|      1|    fn covered(&self) {
   94|      1|        println!("covered")
   95|      1|    }
   96|       |
   97|      0|    [0;41mfn uncovered(&self) {[0m
   98|      0|[0;41m        println!("uncovered");[0m
   99|      0|[0;41m    }[0m
  100|       |
  101|      1|    fn func_covered() {
  102|      1|        println!("func_covered");
  103|      1|    }
  104|       |
  105|      0|    [0;41mfn func_uncovered() {[0m
  106|      0|[0;41m        println!("func_covered");[0m
  107|      0|[0;41m    }[0m
  108|       |}
  109|       |struct BTraitImplBoxed;
  110|       |
  111|       |impl BTrait for BTraitImplBoxed {
  112|      1|    fn covered(&self) {
  113|      1|        println!("covered")
  114|      1|    }
  115|       |
  116|       |    fn uncovered(&self) {
  117|       |        println!("uncovered");
  118|       |    }
  119|       |}
  120|       |
  121|       |macro_rules! simple_rule {
  122|       |    () => {
  123|       |        println!("simple rule");
  124|       |    };
  125|       |}
  126|       |
  127|      1|fn call_simple_rule() {
  128|      1|    simple_rule!();
  129|      1|}
  130|       |
  131|      1|fn call_generic_atrait<T: ATrait>(input: T) {
  132|      1|    input.covered();
  133|      1|    input.default_covered();
  134|      1|    T::func_covered();
  135|      1|}
  136|       |
  137|      [0;35m1[0m|async fn async_func() {
  138|       |    println!("async_func");
  139|       |}
  140|       |
  141|      [0;35m1[0m|async fn async_func_anon() {
  142|      1|    let x = async {
  143|      1|        println!("async_func");
  144|      1|    };
  145|      1|    x.await;
  146|      1|}
  147|       |
  148|       |#[async_trait]
  149|       |trait AsyncTrait {
  150|       |    async fn covered(&self);
  151|       |    async fn uncovered(&self);
  152|       |}
  153|       |
  154|       |struct AsyncTraitImpl;
  155|       |
  156|       |#[async_trait]
  157|       |impl AsyncTrait for AsyncTraitImpl {
  158|      [0;35m1[0m|    async fn covered(&self) {
  159|      1|        println!("covered");
  160|      1|        async_func_from_trait_covered().await;
  161|      1|    }
  162|       |
  163|       |    async fn uncovered(&self) {
  164|       |        println!("uncovered");
  165|       |    }
  166|       |}
  167|       |
  168|      [0;35m1[0m|async fn async_func_from_trait_covered() {
  169|       |    println!("covered async func from trait");
  170|       |}
  171|       |
  172|       |#[cfg(test)]
  173|       |mod tests {
  174|       |    use futures::executor::block_on;
  175|       |
  176|       |    use super::*;
  177|       |
  178|       |    #[test]
  179|      1|    fn test_main() {
  ------------------
  | [0;36mcodecovsample::tests::test_main::{closure#0}:
[0m  |  179|      1|    fn test_main() {
  ------------------
  180|      1|        main();
  181|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::test_main:
[0m  |  179|      1|    fn test_main() {
  |  180|      1|        main();
  |  181|      1|    }
  ------------------
  182|       |
  183|       |    #[test]
  184|      1|    fn cover_enum() {
  ------------------
  | [0;36mcodecovsample::tests::cover_enum::{closure#0}:
[0m  |  184|      1|    fn cover_enum() {
  ------------------
  185|      1|        fn_covered_enum(Covered::Variant1);
  186|      1|        fn_covered_enum(Covered::Variant2);
  187|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_enum:
[0m  |  184|      1|    fn cover_enum() {
  |  185|      1|        fn_covered_enum(Covered::Variant1);
  |  186|      1|        fn_covered_enum(Covered::Variant2);
  |  187|      1|    }
  ------------------
  188|       |
  189|       |    #[test]
  190|      1|    fn partially_cover_enum() {
  ------------------
  | [0;36mcodecovsample::tests::partially_cover_enum::{closure#0}:
[0m  |  190|      1|    fn partially_cover_enum() {
  ------------------
  191|      1|        fn_partially_covered_enum(PartiallyCovered::Variant1);
  192|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::partially_cover_enum:
[0m  |  190|      1|    fn partially_cover_enum() {
  |  191|      1|        fn_partially_covered_enum(PartiallyCovered::Variant1);
  |  192|      1|    }
  ------------------
  193|       |
  194|       |    #[test]
  195|      1|    fn cover_atrait_direct() {
  ------------------
  | [0;36mcodecovsample::tests::cover_atrait_direct::{closure#0}:
[0m  |  195|      1|    fn cover_atrait_direct() {
  ------------------
  196|      1|        let x = ATraitImplDirect;
  197|      1|        x.covered();
  198|      1|        x.default_covered();
  199|      1|        <ATraitImplDirect as ATrait>::func_covered();
  200|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_atrait_direct:
[0m  |  195|      1|    fn cover_atrait_direct() {
  |  196|      1|        let x = ATraitImplDirect;
  |  197|      1|        x.covered();
  |  198|      1|        x.default_covered();
  |  199|      1|        <ATraitImplDirect as ATrait>::func_covered();
  |  200|      1|    }
  ------------------
  201|       |    #[test]
  202|      1|    fn cover_atrait_boxed() {
  ------------------
  | [0;36mcodecovsample::tests::cover_atrait_boxed::{closure#0}:
[0m  |  202|      1|    fn cover_atrait_boxed() {
  ------------------
  203|      1|        let x: Box<dyn BTrait> = Box::new(BTraitImplBoxed);
  204|      1|        x.covered();
  205|      1|        x.default_covered();
  206|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_atrait_boxed:
[0m  |  202|      1|    fn cover_atrait_boxed() {
  |  203|      1|        let x: Box<dyn BTrait> = Box::new(BTraitImplBoxed);
  |  204|      1|        x.covered();
  |  205|      1|        x.default_covered();
  |  206|      1|    }
  ------------------
  207|       |
  208|       |    #[test]
  209|      1|    fn cover_simple_rule() {
  ------------------
  | [0;36mcodecovsample::tests::cover_simple_rule::{closure#0}:
[0m  |  209|      1|    fn cover_simple_rule() {
  ------------------
  210|      1|        call_simple_rule();
  211|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_simple_rule:
[0m  |  209|      1|    fn cover_simple_rule() {
  |  210|      1|        call_simple_rule();
  |  211|      1|    }
  ------------------
  212|       |
  213|       |    #[test]
  214|      1|    fn cover_generic_atrait() {
  ------------------
  | [0;36mcodecovsample::tests::cover_generic_atrait::{closure#0}:
[0m  |  214|      1|    fn cover_generic_atrait() {
  ------------------
  215|      1|        let x = ATraitImplGeneric;
  216|      1|        call_generic_atrait(x);
  217|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_generic_atrait:
[0m  |  214|      1|    fn cover_generic_atrait() {
  |  215|      1|        let x = ATraitImplGeneric;
  |  216|      1|        call_generic_atrait(x);
  |  217|      1|    }
  ------------------
  218|       |
  219|       |    #[test]
  220|      1|    fn cover_async_funcs() {
  ------------------
  | [0;36mcodecovsample::tests::cover_async_funcs::{closure#0}:
[0m  |  220|      1|    fn cover_async_funcs() {
  ------------------
  221|      1|        block_on(async {
  222|      1|            async_func().await;
  223|      1|            async_func_anon().await;
  224|      [0;35m1[0m|        });
  225|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_async_funcs:
[0m  |  220|      1|    fn cover_async_funcs() {
  |  221|      1|        block_on(async {
  |  222|       |            async_func().await;
  |  223|       |            async_func_anon().await;
  |  224|      1|        });
  |  225|      1|    }
  ------------------
  226|       |
  227|       |    #[test]
  228|      1|    fn cover_async_trait() {
  ------------------
  | [0;36mcodecovsample::tests::cover_async_trait::{closure#0}:
[0m  |  228|      1|    fn cover_async_trait() {
  ------------------
  229|      1|        block_on(async {
  230|      1|            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);
  231|      1|            x.covered().await;
  232|      [0;35m1[0m|        });
  233|      1|    }
  ------------------
  | [0;36mcodecovsample::tests::cover_async_trait:
[0m  |  228|      1|    fn cover_async_trait() {
  |  229|      1|        block_on(async {
  |  230|       |            let x: Box<dyn AsyncTrait> = Box::new(AsyncTraitImpl);
  |  231|       |            x.covered().await;
  |  232|      1|        });
  |  233|      1|    }
  ------------------
  234|       |}

